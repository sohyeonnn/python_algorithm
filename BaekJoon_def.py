'''
**python_def 개념**
1. 파이썬 함수란?
; 입력값에 따라 결과는 달라질 수 있지만 로직 자체는 같은 경우, 하나의 포장지 안에
넣어서 계속 재사용할 수 있도록 만들어놓은 틀을 함수라고 한다.
2. 함수는 '입력값'과 '출력값'으로 이루어 진다.
; 함수에 따라 입력값만 있는 함수도 있고, 출력값만 있는 함수도 있고 둘다 없는 함수도 있다.
3. 코드에서 함수를 사용한다는 것은 함수를 '호출'한다고 한다.


**다양한 모양의 python 함수**
1. 입력x, 반환값x
def 함수명():
     수행문장
;함수를 호출하는 방법은 함수의 이름과 () 까지 입력하면 호출된다.
-> 함수명()

2. 입력o, 반환값x
def 함수명(매개변수1, 매개변수2, ...):
    수행문장
; 매개변수는 함수를 호출할 때 특정 값을 넣어주기 위해서 통로를 뚫은거라고 생각하면
쉽게 이해할 수 있다.

3. 입력x, 반환값o
def 함수이름():
    수행문장
    return 반환값
; 함수를 호출하면 함수 내부에서 어떤 로직을 돌아서 그 결과값을 함수 밖으로
보내주는걸 반환값이라 한다.
위의 형태처럼 return을 작성하고 그 뒤에 함수 밖으로 보낼 반환값을 적는다.

4. 입력o, 반환o         (가장 흔하게 볼 수 있는 함수의 형태)
def 함수이름(매개변수1, 매개변수2, ...):
    수행문장
    return 반환값
;
'''


#15596; 정수 N개의 합
'''
정수 n개가 주어졌을 때, n개의 합을 구하는 함수를 작성하시오.
작성해야 하는 함수는 다음과 같다.
- Python 2, Python 3, PyPy, PyPy3: def solve(a: list) -> int
a: 합을 구해야 하는 정수 n개가 저장되어 있는 리스트 (0 ≤ a[i] ≤ 1,000,000, 1 ≤ n ≤ 3,000,000)
리턴값: a에 포함되어 있는 정수 n개의 합 (정수)
'''

'''
#list로 나타낸 경우
n = int(input())
a = list(map(int, input().split()))
hap = 0

for i in range(len(a)):
    hap += a[i]
print(hap)
'''

'''
**함수 기본 정의 형태**
def func(a, b, ...):
    원하는 동작 수행

    return 결과값
'''

'''
#case1; 런타임에러 
def result(a):
    hap = 0
    for i in a:
        hap += i
    return hap


#case2
def result(a):
    return sum(a)
'''


#4673; 셀프넘버
'''
셀프넘버를 구하려고 접근하면 어려워짐
그러면?
-> 10000보다 작으면서 생성자로 생성이 가능한 수를 if 조건이라치면
 else 조건에 해당하는 수를 print 한다. 
'''

number = set(range(1, 10001))      #1~10000까지 수 set
d_number = []       #빈 리스트 생성


for i in range(10000):
    i += 1      #1씩 증가

    n1 = list(map(int, str(i)))     #1~10000까지 각 자리수를 하나씩 떼어낸다

    dn = sum(n1[0:]) + i        #떼어낸 자리수와 자기자신을 모두 더한다

    d_number.append(dn)
    d_number1 = set(d_number)

    self_number = number - d_number1

for sn in sorted(self_number):
    print(sn)

'''
*문제review
1. 숫자를 삭제한걸(셀프넘버) 출력해야하는데
구할수 있는 수를 제외한 10000이하의 수를 어떻게 뽑아야할지 감이 안잡힘 
-> 1~10000까지의 리스트를 만들어서 구할 수 있는 수를 빼주자!

2. 위에서처럼 문제를 list로 해결하려 했더니
출력 시간이 너무 오래걸리고 해당하지 않는 수 까지 출력됨(9999, 10000, .. 등등)
-> 원래 썻던 코드;   self_number = [x for x in number if x not in d_number2]
를 사용해서 number(1~10000)에서 d_number(10000이하의 수로 구할수있는 값)에 해당하지 않는 값을 출력하려 했는데
속도 너무 느리고 중복...

3. list를 set으로 바꿔서 출력하면 중복 문제 & 시간 문제 해결가능하지 않을까?
-> set으로 바꾸고 한줄에 하나씩, 증가하는 순서로 출력시키기 위해
반복문으로 sorted 해서 출력 해줌
'''



